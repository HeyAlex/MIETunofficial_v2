package mobile.miet.alex.com.mietunofficial_v2.greenDao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USER_MODEL".
 */
@Entity(active = true)
public class UserModel implements java.io.Serializable {

    @Id
    @NotNull
    private String numst;
    private String week;
    private String firstname;
    private String lastname;
    private String lastlastname;
    private String napr;
    private String sem;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserModelDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "numst", referencedName = "numst")
    })
    private List<DisciplineModel> disciplines;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public UserModel() {
    }

    public UserModel(String numst) {
        this.numst = numst;
    }

    @Generated
    public UserModel(String numst, String week, String firstname, String lastname, String lastlastname, String napr, String sem) {
        this.numst = numst;
        this.week = week;
        this.firstname = firstname;
        this.lastname = lastname;
        this.lastlastname = lastlastname;
        this.napr = napr;
        this.sem = sem;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserModelDao() : null;
    }

    @NotNull
    public String getNumst() {
        return numst;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNumst(@NotNull String numst) {
        this.numst = numst;
    }

    public String getWeek() {
        return week;
    }

    public void setWeek(String week) {
        this.week = week;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getLastlastname() {
        return lastlastname;
    }

    public void setLastlastname(String lastlastname) {
        this.lastlastname = lastlastname;
    }

    public String getNapr() {
        return napr;
    }

    public void setNapr(String napr) {
        this.napr = napr;
    }

    public String getSem() {
        return sem;
    }

    public void setSem(String sem) {
        this.sem = sem;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DisciplineModel> getDisciplines() {
        if (disciplines == null) {
            __throwIfDetached();
            DisciplineModelDao targetDao = daoSession.getDisciplineModelDao();
            List<DisciplineModel> disciplinesNew = targetDao._queryUserModel_Disciplines(numst);
            synchronized (this) {
                if(disciplines == null) {
                    disciplines = disciplinesNew;
                }
            }
        }
        return disciplines;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDisciplines() {
        disciplines = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
