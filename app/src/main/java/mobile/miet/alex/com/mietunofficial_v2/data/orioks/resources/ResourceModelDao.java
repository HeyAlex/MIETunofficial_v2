package mobile.miet.alex.com.mietunofficial_v2.data.orioks.resources;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import mobile.miet.alex.com.mietunofficial_v2.data.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RESOURCE_MODEL".
*/
public class ResourceModelDao extends AbstractDao<ResourceModel, Void> {

    public static final String TABLENAME = "RESOURCE_MODEL";

    /**
     * Properties of entity ResourceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdLink = new Property(0, Integer.class, "idLink", false, "ID_LINK");
        public final static Property Resourceslistjson = new Property(1, String.class, "resourceslistjson", false, "RESOURCESLISTJSON");
    }


    public ResourceModelDao(DaoConfig config) {
        super(config);
    }
    
    public ResourceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESOURCE_MODEL\" (" + //
                "\"ID_LINK\" INTEGER," + // 0: idLink
                "\"RESOURCESLISTJSON\" TEXT);"); // 1: resourceslistjson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESOURCE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResourceModel entity) {
        stmt.clearBindings();
 
        Integer idLink = entity.getIdLink();
        if (idLink != null) {
            stmt.bindLong(1, idLink);
        }
 
        String resourceslistjson = entity.getResourceslistjson();
        if (resourceslistjson != null) {
            stmt.bindString(2, resourceslistjson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResourceModel entity) {
        stmt.clearBindings();
 
        Integer idLink = entity.getIdLink();
        if (idLink != null) {
            stmt.bindLong(1, idLink);
        }
 
        String resourceslistjson = entity.getResourceslistjson();
        if (resourceslistjson != null) {
            stmt.bindString(2, resourceslistjson);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ResourceModel readEntity(Cursor cursor, int offset) {
        ResourceModel entity = new ResourceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // idLink
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // resourceslistjson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResourceModel entity, int offset) {
        entity.setIdLink(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setResourceslistjson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ResourceModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ResourceModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(ResourceModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
