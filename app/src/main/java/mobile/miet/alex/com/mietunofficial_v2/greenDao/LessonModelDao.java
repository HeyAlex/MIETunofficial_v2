package mobile.miet.alex.com.mietunofficial_v2.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LESSON_MODEL".
*/
public class LessonModelDao extends AbstractDao<LessonModel, Long> {

    public static final String TABLENAME = "LESSON_MODEL";

    /**
     * Properties of entity LessonModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Week = new Property(1, Integer.class, "week", false, "WEEK");
        public final static Property Day = new Property(2, String.class, "day", false, "DAY");
        public final static Property Room = new Property(3, String.class, "room", false, "ROOM");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property TimeFrom = new Property(5, String.class, "timeFrom", false, "TIME_FROM");
        public final static Property TimeTo = new Property(6, String.class, "timeTo", false, "TIME_TO");
        public final static Property Code = new Property(7, String.class, "code", false, "CODE");
        public final static Property Week1 = new Property(8, boolean.class, "week1", false, "WEEK1");
        public final static Property Week2 = new Property(9, boolean.class, "week2", false, "WEEK2");
        public final static Property Week3 = new Property(10, boolean.class, "week3", false, "WEEK3");
        public final static Property Week4 = new Property(11, boolean.class, "week4", false, "WEEK4");
    }

    private Query<LessonModel> scheduleModel_LessonsOneQuery;
    private Query<LessonModel> scheduleModel_LessonsTwoQuery;
    private Query<LessonModel> scheduleModel_LessonsThirdQuery;
    private Query<LessonModel> scheduleModel_LessonsFourQuery;

    public LessonModelDao(DaoConfig config) {
        super(config);
    }
    
    public LessonModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEEK\" INTEGER," + // 1: week
                "\"DAY\" TEXT," + // 2: day
                "\"ROOM\" TEXT," + // 3: room
                "\"TIME\" TEXT," + // 4: time
                "\"TIME_FROM\" TEXT," + // 5: timeFrom
                "\"TIME_TO\" TEXT," + // 6: timeTo
                "\"CODE\" TEXT," + // 7: code
                "\"WEEK1\" INTEGER NOT NULL ," + // 8: week1
                "\"WEEK2\" INTEGER NOT NULL ," + // 9: week2
                "\"WEEK3\" INTEGER NOT NULL ," + // 10: week3
                "\"WEEK4\" INTEGER NOT NULL );"); // 11: week4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LessonModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(2, week);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(3, day);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(4, room);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(6, timeFrom);
        }
 
        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(7, timeTo);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(8, code);
        }
        stmt.bindLong(9, entity.getWeek1() ? 1L: 0L);
        stmt.bindLong(10, entity.getWeek2() ? 1L: 0L);
        stmt.bindLong(11, entity.getWeek3() ? 1L: 0L);
        stmt.bindLong(12, entity.getWeek4() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LessonModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(2, week);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(3, day);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(4, room);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String timeFrom = entity.getTimeFrom();
        if (timeFrom != null) {
            stmt.bindString(6, timeFrom);
        }
 
        String timeTo = entity.getTimeTo();
        if (timeTo != null) {
            stmt.bindString(7, timeTo);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(8, code);
        }
        stmt.bindLong(9, entity.getWeek1() ? 1L: 0L);
        stmt.bindLong(10, entity.getWeek2() ? 1L: 0L);
        stmt.bindLong(11, entity.getWeek3() ? 1L: 0L);
        stmt.bindLong(12, entity.getWeek4() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LessonModel readEntity(Cursor cursor, int offset) {
        LessonModel entity = new LessonModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // week
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // day
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // room
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeFrom
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeTo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // code
            cursor.getShort(offset + 8) != 0, // week1
            cursor.getShort(offset + 9) != 0, // week2
            cursor.getShort(offset + 10) != 0, // week3
            cursor.getShort(offset + 11) != 0 // week4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LessonModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeek(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDay(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeFrom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeTo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeek1(cursor.getShort(offset + 8) != 0);
        entity.setWeek2(cursor.getShort(offset + 9) != 0);
        entity.setWeek3(cursor.getShort(offset + 10) != 0);
        entity.setWeek4(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LessonModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LessonModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LessonModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "LessonsOne" to-many relationship of ScheduleModel. */
    public List<LessonModel> _queryScheduleModel_LessonsOne(boolean week1) {
        synchronized (this) {
            if (scheduleModel_LessonsOneQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Week1.eq(null));
                scheduleModel_LessonsOneQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsOneQuery.forCurrentThread();
        query.setParameter(0, week1);
        return query.list();
    }

    /** Internal query to resolve the "LessonsTwo" to-many relationship of ScheduleModel. */
    public List<LessonModel> _queryScheduleModel_LessonsTwo(boolean week2) {
        synchronized (this) {
            if (scheduleModel_LessonsTwoQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Week2.eq(null));
                scheduleModel_LessonsTwoQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsTwoQuery.forCurrentThread();
        query.setParameter(0, week2);
        return query.list();
    }

    /** Internal query to resolve the "LessonsThird" to-many relationship of ScheduleModel. */
    public List<LessonModel> _queryScheduleModel_LessonsThird(boolean week3) {
        synchronized (this) {
            if (scheduleModel_LessonsThirdQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Week3.eq(null));
                scheduleModel_LessonsThirdQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsThirdQuery.forCurrentThread();
        query.setParameter(0, week3);
        return query.list();
    }

    /** Internal query to resolve the "LessonsFour" to-many relationship of ScheduleModel. */
    public List<LessonModel> _queryScheduleModel_LessonsFour(boolean week4) {
        synchronized (this) {
            if (scheduleModel_LessonsFourQuery == null) {
                QueryBuilder<LessonModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Week4.eq(null));
                scheduleModel_LessonsFourQuery = queryBuilder.build();
            }
        }
        Query<LessonModel> query = scheduleModel_LessonsFourQuery.forCurrentThread();
        query.setParameter(0, week4);
        return query.list();
    }

}
