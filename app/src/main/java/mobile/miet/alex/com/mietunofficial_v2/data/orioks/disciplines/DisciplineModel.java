package mobile.miet.alex.com.mietunofficial_v2.data.orioks.disciplines;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

import mobile.miet.alex.com.mietunofficial_v2.data.DaoSession;
import mobile.miet.alex.com.mietunofficial_v2.data.orioks.events.EventModel;
import mobile.miet.alex.com.mietunofficial_v2.data.orioks.events.EventModelDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "DISCIPLINE_MODEL".
 */
@Entity(active = true)
public class DisciplineModel implements java.io.Serializable {

    @Id
    private Integer idLink;
    private String itogName;
    private String name;
    private Float ballPoints;
    private Float minBall;
    private Float maxBall;
    private Integer markPoints;
    private Integer idDis;
    private String preps;
    private int numst;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DisciplineModelDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "idLink", referencedName = "idLink")
    })
    private List<EventModel> events;

    @Generated
    public DisciplineModel() {
    }

    public DisciplineModel(Integer idLink) {
        this.idLink = idLink;
    }

    @Generated
    public DisciplineModel(Integer idLink, String itogName, String name, Float ballPoints, Float minBall, Float maxBall, Integer markPoints, Integer idDis, String preps, int numst) {
        this.idLink = idLink;
        this.itogName = itogName;
        this.name = name;
        this.ballPoints = ballPoints;
        this.minBall = minBall;
        this.maxBall = maxBall;
        this.markPoints = markPoints;
        this.idDis = idDis;
        this.preps = preps;
        this.numst = numst;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDisciplineModelDao() : null;
    }

    public Integer getIdLink() {
        return idLink;
    }

    public void setIdLink(Integer idLink) {
        this.idLink = idLink;
    }

    public String getItogName() {
        return itogName;
    }

    public void setItogName(String itogName) {
        this.itogName = itogName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getBallPoints() {
        return ballPoints;
    }

    public void setBallPoints(Float ballPoints) {
        this.ballPoints = ballPoints;
    }

    public Float getMinBall() {
        return minBall;
    }

    public void setMinBall(Float minBall) {
        this.minBall = minBall;
    }

    public Float getMaxBall() {
        return maxBall;
    }

    public void setMaxBall(Float maxBall) {
        this.maxBall = maxBall;
    }

    public Integer getMarkPoints() {
        return markPoints;
    }

    public void setMarkPoints(Integer markPoints) {
        this.markPoints = markPoints;
    }

    public Integer getIdDis() {
        return idDis;
    }

    public void setIdDis(Integer idDis) {
        this.idDis = idDis;
    }

    public String getPreps() {
        return preps;
    }

    public void setPreps(String preps) {
        this.preps = preps;
    }

    public int getNumst() {
        return numst;
    }

    public void setNumst(int numst) {
        this.numst = numst;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<EventModel> getEvents() {
        if (events == null) {
            __throwIfDetached();
            EventModelDao targetDao = daoSession.getEventModelDao();
            List<EventModel> eventsNew = targetDao._queryDisciplineModel_Events(idLink);
            synchronized (this) {
                if(events == null) {
                    events = eventsNew;
                }
            }
        }
        return events;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetEvents() {
        events = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
