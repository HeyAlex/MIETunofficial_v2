package mobile.miet.alex.com.mietunofficial_v2.greenDao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "DISCIPLINE_MODEL".
 */
@Entity(active = true)
public class DisciplineModel implements java.io.Serializable {

    @Id
    private String idLink;
    private String itog_name;
    private String name;
    private String ball;
    private String min_ball;
    private String max_ball;
    private String mark;
    private String idDis;
    private String preps;

    @NotNull
    private String numst;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DisciplineModelDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "idLink", referencedName = "idLink")
    })
    private List<EventModel> events;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public DisciplineModel() {
    }

    public DisciplineModel(String idLink) {
        this.idLink = idLink;
    }

    @Generated
    public DisciplineModel(String idLink, String itog_name, String name, String ball, String min_ball, String max_ball, String mark, String idDis, String preps, String numst) {
        this.idLink = idLink;
        this.itog_name = itog_name;
        this.name = name;
        this.ball = ball;
        this.min_ball = min_ball;
        this.max_ball = max_ball;
        this.mark = mark;
        this.idDis = idDis;
        this.preps = preps;
        this.numst = numst;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDisciplineModelDao() : null;
    }

    public String getIdLink() {
        return idLink;
    }

    public void setIdLink(String idLink) {
        this.idLink = idLink;
    }

    public String getItog_name() {
        return itog_name;
    }

    public void setItog_name(String itog_name) {
        this.itog_name = itog_name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBall() {
        return ball;
    }

    public void setBall(String ball) {
        this.ball = ball;
    }

    public String getMin_ball() {
        return min_ball;
    }

    public void setMin_ball(String min_ball) {
        this.min_ball = min_ball;
    }

    public String getMax_ball() {
        return max_ball;
    }

    public void setMax_ball(String max_ball) {
        this.max_ball = max_ball;
    }

    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    public String getIdDis() {
        return idDis;
    }

    public void setIdDis(String idDis) {
        this.idDis = idDis;
    }

    public String getPreps() {
        return preps;
    }

    public void setPreps(String preps) {
        this.preps = preps;
    }

    @NotNull
    public String getNumst() {
        return numst;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNumst(@NotNull String numst) {
        this.numst = numst;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<EventModel> getEvents() {
        if (events == null) {
            __throwIfDetached();
            EventModelDao targetDao = daoSession.getEventModelDao();
            List<EventModel> eventsNew = targetDao._queryDisciplineModel_Events(idLink);
            synchronized (this) {
                if(events == null) {
                    events = eventsNew;
                }
            }
        }
        return events;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetEvents() {
        events = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
